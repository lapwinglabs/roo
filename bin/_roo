#!/usr/bin/env node

/**
 * Modules
 */

var cwd = process.cwd();
var Roo = require('../');
var Watch = require('wtch');
var window = require('open');
var m = require('multiline');
var join = require('path').join;
var bundle = require('www-bundle');
var resolve = require('path').resolve;
var extname = require('path').extname;
var relative = require('path').relative;
var basename = require('path').basename;
var argv = require('minimist')(process.argv.slice(2));

/**
 * Opts
 */

var help = m(function() {/*

  Usage: roo [options] <assets, ...>

    Options:

      -h, --help                output usage information
      -V, --version             output the version number
      -p, --port <port>         specify the port [process.env.PORT]
      -r, --root <root>         specify a root [process.cwd()]
      -l, --live                enable livereload
      -o, --open                enable open

    Examples:

      # compile index.js and index.css and add to the page

        roo index.js index.css

      # create a react app (note: argument order matters) and
      # add { browser: { "react": "react/dist/react.js" } }
      # to your package.json, then run:

        npm install react normalize.css
        roo index.css react normalize.css index.js

*/});

/**
 * Help
 */

if (argv.h || argv.help) {
  console.log(help);
  process.exit(0);
}

/**
 * Get the port
 */

argv.port = argv.port || argv.p;
var port = argv.port || process.env.PORT;

/**
 * Production
 */

var production = 'production' == process.env.NODE_ENV;

/**
 * Terminal
 */

var isatty = !! process.stdin.isTTY;

/**
 * Open
 */

var open = argv.open || argv.o;

/**
 * Setup the root
 */

argv.root = argv.root || argv.r;
var root = argv.root ? resolve(cwd, argv.root) : cwd;

/**
 * Get the template
 */

var template = relative(root, join(__dirname, 'template.html'));

/**
 * Support live reload
 */

var live = !production && !!argv.live;

/**
 * Setup roo
 */

var roo = Roo(root);

/**
 * Assets
 */

var assets = argv._.map(function(asset) {
  return relative(root, resolve(cwd, asset));
});

/**
 * No assets?
 */

if (!assets.length) {
  console.log(help);
  process.exit(0);
}

/**
 * Setup bundle
 */

roo.use(bundle({ root: root }));

/**
 * Segment into CSS and JS
 */

var scripts = [];
var styles = [];

assets.forEach(function(asset) {
  if (extname(asset) === '.css') styles.push(asset);
  else scripts.push(asset);
  bundle(asset);
})

/**
 * Listen to anything
 */

roo.get(/.*/, function *(next) {
  var host = this.protocol + '://' + this.host + '/';
  this.body = yield roo.render(template, {
    scripts: scripts.map(function(script) { return host + script }),
    styles: styles.map(function(style) { return host + style }),
    live: !!argv.live
  })
})

/**
 * Listen
 */

roo.listen(port, function() {
  var addr = this.address();
  console.log('listening on [%s]:%s', addr.address, addr.port);
  !production && isatty && open && window('http://localhost:' + addr.port);
})

/**
 * Setup the file watcher
 */

if (live) {
  Watch(assets, { root: root })
    .on('connect', function() {
      console.log('livereload connected');
    })
}
